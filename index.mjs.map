{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the number of elements in an ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeInteger} number of elements\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var n = numel( zeros( [ 3, 3, 3 ] ) );\n* // returns 27\n*/\nfunction numel( x ) {\n\tvar ndims;\n\tvar sh;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects (e.g., vanilla arrays) can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tn = x.length;\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tndims = sh.length;\n\tif ( ndims === 0 ) {\n\t\t// Note: for minimal \"ndarray-like objects\", this will erroneously return zero when `x` is a zero-dimensional ndarray. This is part of the rationale for having a `length` property on actual ndarrays. As we don't can't know whether a provided ndarray-like is actually zero-dimensional without knowing/inspecting implementation details, we return zero here...\n\t\treturn 0;\n\t}\n\tn = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = sh[ i ];\n\t\tif ( !isNonNegativeInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tn *= d;\n\t}\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default numel;\n"],"names":["numel","x","ndims","sh","n","d","i","TypeError","format","length","isNonNegativeInteger","shape","isCollection"],"mappings":";;8SA0CA,SAASA,EAAOC,GACf,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GAAkB,iBAANL,GAAwB,OAANA,EAC7B,MAAM,IAAIM,UAAWC,EAAQ,0DAA2DP,IAGzF,GADAG,EAAIH,EAAEQ,OACDC,EAAsBN,GAC1B,OAAOA,EAGR,GADAD,EAAKF,EAAEU,OACDC,EAAcT,GACnB,MAAM,IAAII,UAAWC,EAAQ,0DAA2DP,IAGzF,GAAe,KADfC,EAAQC,EAAGM,QAGV,OAAO,EAGR,IADAL,EAAI,EACEE,EAAI,EAAGA,EAAIJ,EAAOI,IAAM,CAE7B,GADAD,EAAIF,EAAIG,IACFI,EAAsBL,GAC3B,MAAM,IAAIE,UAAWC,EAAQ,0DAA2DP,IAEzFG,GAAKC,CACL,CACD,OAAOD,CACR"}